#define PI 3.14159265359

#define CAMERA_DIST 25.

vec4 map(vec2 p) {
    vec3 col = vec3(0.5 + sin(20. * PI * p.x), 0.5 + sin(20. * PI * p.y), 1.);
    return vec4(sqrt(0.5 * clamp(col, 0., 1.)), 1.);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
    vec2 p = (2. * fragCoord.xy - iResolution.xy) / iResolution.x;
    fragColor = vec4(sqrt(vec3(0.05) * (1. - length(p)/2.)), 1.);
    float t = clamp(1.125 - abs(mod(iTime + 1., 10.) - 5.)/4., 0., 1.);
    if (t < 1.) {
        float zoom = pow(2. * t, 5.) + 1.;
        vec3 dir = normalize(vec3(PI * p, -zoom * (CAMERA_DIST - 1.)));
        float b = CAMERA_DIST * dir.z;
        float h = b*b - CAMERA_DIST*CAMERA_DIST + 1.;
        if (h >= 0.) {
            vec3 q = vec3(0., 0., CAMERA_DIST) - dir * (b + sqrt(h));
            p = zoom * vec2(atan(q.x, q.z) / PI, 0.5 - acos(q.y / length(q)) / PI);
        } else {
            return;
        }
    }
    if (abs(p.y) <= 0.5 && abs(p.x) <= 1.) fragColor = map(p);
}
